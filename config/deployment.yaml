# 部署配置文件
# 定义应用部署、容器化和环境管理配置

# 全局部署配置
global:
  app_name: "rpa-tornado"
  version: "1.0.0"
  environment: "${ENVIRONMENT:-production}"
  namespace: "rpa-system"
  
  # 镜像配置
  image:
    registry: "registry.yourdomain.com"
    repository: "rpa/tornado"
    tag: "${APP_VERSION:-latest}"
    pull_policy: "IfNotPresent"
  
  # 标签和注解
  labels:
    app: "rpa-tornado"
    component: "api-server"
    version: "1.0.0"
    tier: "backend"
    environment: "${ENVIRONMENT}"
  
  annotations:
    description: "RPA Tornado API Server"
    maintainer: "ops@yourdomain.com"
    documentation: "https://docs.yourdomain.com/rpa-tornado"

# Docker配置
docker:
  # Dockerfile配置
  dockerfile:
    base_image: "python:3.11-slim"
    working_dir: "/app"
    
    # 构建参数
    build_args:
      PYTHON_VERSION: "3.11"
      APP_ENV: "${ENVIRONMENT}"
      BUILD_DATE: "${BUILD_DATE}"
      GIT_COMMIT: "${GIT_COMMIT}"
    
    # 环境变量
    env_vars:
      PYTHONPATH: "/app"
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      TZ: "UTC"
    
    # 端口暴露
    expose_ports:
      - 8000
      - 9090  # Prometheus metrics
    
    # 健康检查
    health_check:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: "30s"
      timeout: "10s"
      retries: 3
      start_period: "60s"
    
    # 用户配置
    user:
      uid: 1000
      gid: 1000
      name: "appuser"
      home: "/home/appuser"
    
    # 卷挂载
    volumes:
      - "/app/logs:/app/logs"
      - "/app/config:/app/config:ro"
      - "/app/data:/app/data"

# 环境配置
environments:
  # 开发环境
  development:
    name: "开发环境"
    debug: true
    host: "0.0.0.0"
    port: 8888
    workers: 1
    auto_reload: true
    log_level: "DEBUG"
    
    # 端口管理配置
    port_management:
      auto_kill_port: false  # 是否自动杀掉占用端口的进程
      check_port_on_start: true  # 启动时检查端口占用
      port_conflict_action: "warn"  # 端口冲突时的行为: warn/kill/exit
    
    # 数据库配置
    database:
      url: "sqlite:///./data/dev.db"
      echo: true
      pool_size: 5
      max_overflow: 10
    
    # Redis配置
    redis:
      host: "localhost"
      port: 6379
      db: 0
      password: null
      
    # 外部服务配置
    external_services:
      timeout: 30
      retry_count: 3
      
  # 测试环境
  testing:
    name: "测试环境"
    debug: false
    host: "0.0.0.0"
    port: 8888
    workers: 2
    auto_reload: false
    log_level: "INFO"
    
    # 端口管理配置
    port_management:
      auto_kill_port: true  # 测试环境自动杀掉占用端口的进程
      check_port_on_start: true
      port_conflict_action: "kill"
    
    # 数据库配置
    database:
      url: "postgresql://user:password@localhost:5432/rpa_test"
      echo: false
      pool_size: 10
      max_overflow: 20
    
    # Redis配置
    redis:
      host: "localhost"
      port: 6379
      db: 1
      password: "test_password"
      
    # 外部服务配置
    external_services:
      timeout: 30
      retry_count: 3
      
  # 生产环境
  production:
    name: "生产环境"
    debug: false
    host: "0.0.0.0"
    port: 8888
    workers: 4
    auto_reload: false
    log_level: "WARNING"
    
    # 端口管理配置
    port_management:
      auto_kill_port: false  # 生产环境不自动杀掉进程，需要手动处理
      check_port_on_start: true
      port_conflict_action: "exit"  # 生产环境遇到端口冲突直接退出
    
    # 数据库配置
    database:
      url: "postgresql://user:password@db-server:5432/rpa_prod"
      echo: false
      pool_size: 20
      max_overflow: 40
      pool_timeout: 30
      pool_recycle: 3600
    
    # Redis配置
    redis:
      host: "redis-server"
      port: 6379
      db: 0
      password: "${REDIS_PASSWORD}"
      ssl: true
      
    # 外部服务配置
    external_services:
      timeout: 60
      retry_count: 5
      
    # 安全配置
    security:
      secret_key: "${SECRET_KEY}"
      jwt_secret: "${JWT_SECRET}"
      api_key_header: "X-API-Key"
      
    # 监控配置
    monitoring:
      enabled: true
      metrics_port: 9090
      health_check_interval: 30
      
# Docker配置
docker:
  # 基础镜像
  base_image: "python:3.11-slim"
  
  # 工作目录
  workdir: "/app"
  
  # 暴露端口
  expose_ports: [8888, 9090]
  
  # 环境变量
  environment:
    - "PYTHONPATH=/app"
    - "PYTHONUNBUFFERED=1"
    
  # 健康检查
  health_check:
    test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
    interval: "30s"
    timeout: "10s"
    retries: 3
    start_period: "40s"
    
  # 资源限制
  resources:
    memory: "512m"
    cpu: "0.5"
    
# Kubernetes配置
kubernetes:
  # 命名空间
  namespace: "rpa-tornado"
  
  # 副本数
  replicas: 3
  
  # 服务配置
  service:
    type: "ClusterIP"
    port: 80
    target_port: 8888
    
  # Ingress配置
  ingress:
    enabled: true
    host: "api.rpa.com"
    tls_enabled: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      
  # 资源配置
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
      
  # 环境变量
  env:
    - name: "ENVIRONMENT"
      value: "production"
    - name: "DATABASE_URL"
      valueFrom:
        secretKeyRef:
          name: "rpa-secrets"
          key: "database-url"
    - name: "REDIS_PASSWORD"
      valueFrom:
        secretKeyRef:
          name: "rpa-secrets"
          key: "redis-password"
          
  # 存活探针
  liveness_probe:
    http_get:
      path: "/health"
      port: 8888
    initial_delay_seconds: 30
    period_seconds: 10
    
  # 就绪探针
  readiness_probe:
    http_get:
      path: "/ready"
      port: 8888
    initial_delay_seconds: 5
    period_seconds: 5
    
# CI/CD配置
ci_cd:
  # 构建配置
  build:
    dockerfile: "Dockerfile"
    context: "."
    target: "production"
    
  # 测试配置
  test:
    unit_tests: true
    integration_tests: true
    coverage_threshold: 80
    
  # 部署配置
  deploy:
    strategy: "rolling"
    max_unavailable: 1
    max_surge: 1
    
  # 回滚配置
  rollback:
    enabled: true
    revision_history_limit: 10
    
# 备份配置
backup:
  # 数据库备份
  database:
    enabled: true
    schedule: "0 2 * * *"  # 每天凌晨2点
    retention_days: 30
    
  # 文件备份
  files:
    enabled: true
    schedule: "0 3 * * 0"  # 每周日凌晨3点
    retention_weeks: 4
    
# 监控和告警
monitoring:
  # Prometheus配置
  prometheus:
    enabled: true
    scrape_interval: "15s"
    
  # Grafana配置
  grafana:
    enabled: true
    dashboards:
      - "api-performance"
      - "system-metrics"
      - "business-metrics"
      
  # 告警配置
  alerts:
    - name: "high-error-rate"
      condition: "error_rate > 0.05"
      duration: "5m"
      severity: "critical"
      
    - name: "high-response-time"
      condition: "response_time_p95 > 2s"
      duration: "10m"
      severity: "warning"
      
    - name: "low-disk-space"
      condition: "disk_usage > 0.85"
      duration: "5m"
      severity: "warning"