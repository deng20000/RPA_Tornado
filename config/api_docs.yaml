# API文档配置文件
# 定义Swagger/OpenAPI文档生成和展示配置

# 全局API文档配置
global:
  enabled: true
  title: "RPA Tornado API"
  description: "领星RPA系统API文档 - 基于领域驱动设计的新架构"
  version: "2.0.0"
  
  # 联系信息
  contact:
    name: "RPA开发团队"
    email: "dev@rpa.com"
    url: "https://docs.rpa.com/support"
  
  # 许可证信息
  license:
    name: "MIT License"
    url: "https://opensource.org/licenses/MIT"
  
  # 服务条款
  terms_of_service: "https://rpa.com/terms"
  
  # 外部文档
  external_docs:
    description: "完整API文档"
    url: "https://docs.rpa.com/api"

# OpenAPI配置
openapi:
  version: "3.0.3"
  
  # 服务器配置
  servers:
    - url: "https://api.rpa.com/v1"
      description: "生产环境"
    - url: "https://staging-api.rpa.com/v1"
      description: "测试环境"
    - url: "http://localhost:8888/api/v1"
      description: "开发环境"

  # 安全方案
  security:
    # JWT认证
    jwt_auth:
      type: "http"
      scheme: "bearer"
      bearer_format: "JWT"
      description: "JWT Token认证"
    
    # API Key认证
    api_key:
      type: "apiKey"
      in: "header"
      name: "X-API-Key"
      description: "API密钥认证"
    
    # OAuth2认证
    oauth2:
      type: "oauth2"
      flows:
        authorization_code:
          authorization_url: "https://auth.rpa.com/oauth/authorize"
          token_url: "https://auth.rpa.com/oauth/token"
          scopes:
            read: "读取权限"
            write: "写入权限"
            admin: "管理员权限"

  # 通用组件
  components:
    # 通用响应模式
    responses:
      Success:
        description: "操作成功"
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: integer
                  example: 200
                message:
                  type: string
                  example: "操作成功"
                data:
                  type: object
      
      Error:
        description: "操作失败"
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: integer
                  example: 400
                message:
                  type: string
                  example: "请求参数错误"
                error:
                  type: string
                  example: "详细错误信息"
    
    # 通用参数
    parameters:
      page:
        name: page
        in: query
        description: "页码"
        schema:
          type: integer
          minimum: 1
          default: 1
      
      limit:
        name: limit
        in: query
        description: "每页数量"
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
      
      sort:
        name: sort
        in: query
        description: "排序字段"
        schema:
          type: string
          example: "created_at"
      
      order:
        name: order
        in: query
        description: "排序方向"
        schema:
          type: string
          enum: ["asc", "desc"]
          default: "desc"

# Swagger UI配置
swagger_ui:
  enabled: true
  path: "/docs"
  title: "RPA Tornado API 文档"
  
  # UI配置
  config:
    deep_linking: true
    display_operation_id: false
    default_models_expand_depth: 1
    default_model_expand_depth: 1
    default_model_rendering: "example"
    display_request_duration: true
    doc_expansion: "list"
    filter: true
    max_displayed_tags: 50
    show_extensions: false
    show_common_extensions: false
    use_unsafe_inline: false
  
  # 主题配置
  theme:
    primary_color: "#1976d2"
    logo_url: "/static/logo.png"
    favicon_url: "/static/favicon.ico"
  
  # OAuth配置
  oauth:
    client_id: "swagger-ui"
    realm: "swagger-ui-realm"
    app_name: "Swagger UI"

# ReDoc配置
redoc:
  enabled: true
  path: "/redoc"
  title: "RPA Tornado API 参考文档"
  
  # 配置选项
  options:
    lazy_rendering: true
    required_props_first: true
    sort_props_alphabetically: true
    expand_responses: ["200", "201"]
    json_sample_expand_level: 2
    hide_download_button: false
    disable_search: false
    only_required_in_samples: false
    path_in_middle_panel: false
    native_scrollbars: false
    theme:
      colors:
        primary:
          main: "#1976d2"
      typography:
        fontSize: "14px"
        lineHeight: "1.5em"
        code:
          fontSize: "13px"

# 文档生成配置
documentation:
  # 输出格式
  output_format: ["html", "json", "yaml", "markdown"]
  output_directory: "docs/api"
  
  # 生成选项
  include_examples: true
  include_schemas: true
  include_security: true
  group_by_domain: true
  
  # 自动生成
  auto_generate:
    enabled: true
    on_startup: true
    watch_changes: true
    
  # 手动配置
  manual_config:
    enabled: true
    config_file: "config/api_manual.yaml"
  
# 标签配置（按领域分组）
tags:
  - name: "统计模块"
    description: "销量报表、订单利润、产品表现等统计功能"
    external_docs:
      description: "统计模块详细文档"
      url: "https://docs.rpa.com/statistics"
      
  - name: "基础数据模块"
    description: "店铺信息、市场列表、分类列表等基础数据功能"
    external_docs:
      description: "基础数据模块详细文档"
      url: "https://docs.rpa.com/base-data"
      
  - name: "多平台模块"
    description: "多平台数据同步、跨平台分析等功能"
    external_docs:
      description: "多平台模块详细文档"
      url: "https://docs.rpa.com/multi-platform"
      
  - name: "产品模块"
    description: "产品管理、库存管理、价格管理等功能"
    external_docs:
      description: "产品模块详细文档"
      url: "https://docs.rpa.com/product"
      
  - name: "Amazon表格模块"
    description: "Amazon数据表格处理、导入导出等功能"
    external_docs:
      description: "Amazon表格模块详细文档"
      url: "https://docs.rpa.com/amazon-table"

# 示例配置
examples:
  # 请求示例
  requests:
    # 统计模块示例
    statistics:
      sales_report:
        summary: "获取销量报表"
        value:
          start_date: "2024-01-01"
          end_date: "2024-01-31"
          marketplace: "US"
          currency: "USD"
      
      profit_analysis:
        summary: "获取利润分析"
        value:
          period: "monthly"
          year: 2024
          month: 1
    
    # 基础数据示例
    base_data:
      shop_info:
        summary: "获取店铺信息"
        value:
          shop_id: "12345"
          include_details: true
      
      marketplace_list:
        summary: "获取市场列表"
        value:
          region: "NA"
          active_only: true
  
  # 响应示例
  responses:
    success:
      summary: "成功响应"
      value:
        code: 200
        message: "操作成功"
        data:
          id: 1
          name: "示例数据"
          created_at: "2024-01-01T00:00:00Z"
    
    error:
      summary: "错误响应"
      value:
        code: 400
        message: "请求参数错误"
        error: "缺少必需参数: start_date"

# 验证配置
validation:
  enabled: true
  
  # 请求验证
  request:
    validate_schema: true
    validate_required: true
    validate_format: true
    validate_range: true
  
  # 响应验证
  response:
    validate_schema: true
    validate_status_codes: true
    validate_headers: true
  
  # 自定义验证规则
  custom_rules:
    date_format: "YYYY-MM-DD"
    datetime_format: "YYYY-MM-DDTHH:mm:ssZ"
    currency_codes: ["USD", "EUR", "GBP", "JPY", "CNY"]
    marketplace_codes: ["US", "CA", "MX", "UK", "DE", "FR", "IT", "ES", "JP"]

# 测试配置
testing:
  enabled: true
  
  # 单元测试
  unit_tests:
    enabled: true
    framework: "pytest"
    coverage_threshold: 80
  
  # 集成测试
  integration_tests:
    enabled: true
    test_data_file: "tests/data/api_test_data.yaml"
  
  # 性能测试
  performance_tests:
    enabled: true
    max_response_time: 2000  # 毫秒
    concurrent_users: 100
  
  # 安全测试
  security_tests:
    enabled: true
    test_auth: true
    test_injection: true
    test_xss: true

# 监控配置
monitoring:
  enabled: true
  
  # API使用统计
  usage_stats:
    enabled: true
    track_endpoints: true
    track_users: true
    track_errors: true
  
  # 性能监控
  performance:
    enabled: true
    response_time_threshold: 1000  # 毫秒
    error_rate_threshold: 5  # 百分比
  
  # 告警配置
  alerts:
    enabled: true
    email_notifications: true
    slack_notifications: false
    webhook_url: "https://hooks.slack.com/services/..."

# 环境特定配置
environments:
  development:
    swagger_ui:
      enabled: true
      debug: true
    redoc:
      enabled: true
    validation:
      strict_mode: false
    testing:
      mock_external_apis: true
  
  testing:
    swagger_ui:
      enabled: true
      debug: false
    redoc:
      enabled: true
    validation:
      strict_mode: true
    testing:
      mock_external_apis: true
  
  production:
    swagger_ui:
      enabled: false  # 生产环境可能不暴露文档
      debug: false
    redoc:
      enabled: false
    validation:
      strict_mode: true
    testing:
      mock_external_apis: false

# 国际化配置
i18n:
  enabled: true
  default_language: "zh-CN"
  supported_languages: ["zh-CN", "en-US", "ja-JP"]
  
  # 翻译文件
  translation_files:
    zh-CN: "i18n/zh-CN/api_docs.yaml"
    en-US: "i18n/en-US/api_docs.yaml"
    ja-JP: "i18n/ja-JP/api_docs.yaml"

# 插件配置
plugins:
  enabled: true
  
  # 可用插件
  available:
    - name: "api_versioning"
      enabled: true
      config:
        default_version: "v1"
        supported_versions: ["v1", "v2"]
    
    - name: "rate_limiting_docs"
      enabled: true
      config:
        show_limits: true
        show_remaining: true
    
    - name: "authentication_helper"
      enabled: true
      config:
        show_auth_examples: true
        show_token_format: true

# 缓存配置
cache:
  enabled: true
  
  # 文档缓存
  documentation:
    ttl: 3600  # 秒
    max_size: 100  # MB
  
  # 模式缓存
  schemas:
    ttl: 7200  # 秒
    max_size: 50  # MB
  
  # 示例缓存
  examples:
    ttl: 1800  # 秒
    max_size: 25  # MB

# 安全配置
security:
  # 文档访问控制
  access_control:
    enabled: true
    require_auth: false  # 开发环境可设为false
    allowed_ips: []
    blocked_ips: []
  
  # 敏感信息过滤
  sensitive_data:
    enabled: true
    filter_patterns:
      - "password"
      - "secret"
      - "token"
      - "key"
    replacement_text: "[FILTERED]"
  
  # CORS配置
  cors:
    enabled: true
    allowed_origins: ["*"]
    allowed_methods: ["GET", "POST", "PUT", "DELETE"]
    allowed_headers: ["*"]
  
  # CSP配置
  content_security_policy:
    enabled: true
    policy: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
      
  - name: "产品模块"
    description: "产品管理、库存管理等功能"
    external_docs:
      description: "产品模块详细文档"
      url: "https://docs.rpa.com/product"

# 安全配置
security:
  schemes:
    - type: "apiKey"
      name: "X-API-Key"
      in: "header"
      description: "API密钥认证"
    - type: "http"
      scheme: "bearer"
      bearer_format: "JWT"
      description: "JWT令牌认证"

# 响应示例配置
examples:
  success_response:
    summary: "成功响应示例"
    value:
      code: 200
      message: "操作成功"
      data: {}
      timestamp: "2024-01-01T00:00:00Z"
      
  error_response:
    summary: "错误响应示例"
    value:
      code: 400
      message: "请求参数错误"
      error: "参数验证失败"
      timestamp: "2024-01-01T00:00:00Z"
      
  pagination_response:
    summary: "分页响应示例"
    value:
      code: 200
      message: "获取成功"
      data:
        items: []
        total: 100
        page: 1
        page_size: 20
        total_pages: 5
      timestamp: "2024-01-01T00:00:00Z"

# 组件配置
components:
  # 通用响应模式
  schemas:
    BaseResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          description: "响应状态码"
          example: 200
        message:
          type: "string"
          description: "响应消息"
          example: "操作成功"
        data:
          type: "object"
          description: "响应数据"
        timestamp:
          type: "string"
          format: "date-time"
          description: "响应时间戳"
          example: "2024-01-01T00:00:00Z"
      required: ["code", "message", "timestamp"]
      
    ErrorResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          description: "错误状态码"
          example: 400
        message:
          type: "string"
          description: "错误消息"
          example: "请求参数错误"
        error:
          type: "string"
          description: "详细错误信息"
          example: "参数验证失败"
        timestamp:
          type: "string"
          format: "date-time"
          description: "错误时间戳"
          example: "2024-01-01T00:00:00Z"
      required: ["code", "message", "timestamp"]
      
    PaginationResponse:
      type: "object"
      properties:
        items:
          type: "array"
          description: "数据项列表"
        total:
          type: "integer"
          description: "总记录数"
          example: 100
        page:
          type: "integer"
          description: "当前页码"
          example: 1
        page_size:
          type: "integer"
          description: "每页大小"
          example: 20
        total_pages:
          type: "integer"
          description: "总页数"
          example: 5
      required: ["items", "total", "page", "page_size", "total_pages"]

# 文档主题配置
theme:
  primary_color: "#1976d2"
  secondary_color: "#424242"
  accent_color: "#ff5722"
  font_family: "Roboto, sans-serif"
  logo_url: "/static/images/logo.png"
  favicon_url: "/static/images/favicon.ico"

# 代码生成配置
code_generation:
  enabled: true
  languages: ["python", "javascript", "java", "go"]
  output_directory: "docs/sdk"
  include_examples: true
  package_name: "rpa_tornado_client"