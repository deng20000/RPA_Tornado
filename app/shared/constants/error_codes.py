# 错误码常量定义
# 定义项目中使用的各种错误码

# 成功码
SUCCESS_CODE = 200

# 客户端错误码 (4xx)
VALIDATION_ERROR_CODE = 400
AUTH_ERROR_CODE = 401
FORBIDDEN_ERROR_CODE = 403
NOT_FOUND_ERROR_CODE = 404
METHOD_NOT_ALLOWED_CODE = 405
CONFLICT_ERROR_CODE = 409
UNPROCESSABLE_ENTITY_CODE = 422
TOO_MANY_REQUESTS_CODE = 429

# 服务器错误码 (5xx)
INTERNAL_ERROR_CODE = 500
NOT_IMPLEMENTED_CODE = 501
BAD_GATEWAY_CODE = 502
SERVICE_UNAVAILABLE_CODE = 503
GATEWAY_TIMEOUT_CODE = 504

# 业务错误码 (自定义)
BUSINESS_ERROR_BASE = 10000

# 参数验证错误
PARAM_MISSING_ERROR = BUSINESS_ERROR_BASE + 1
PARAM_INVALID_ERROR = BUSINESS_ERROR_BASE + 2
PARAM_FORMAT_ERROR = BUSINESS_ERROR_BASE + 3

# 认证授权错误
TOKEN_MISSING_ERROR = BUSINESS_ERROR_BASE + 10
TOKEN_INVALID_ERROR = BUSINESS_ERROR_BASE + 11
TOKEN_EXPIRED_ERROR = BUSINESS_ERROR_BASE + 12
PERMISSION_DENIED_ERROR = BUSINESS_ERROR_BASE + 13

# 外部API错误
EXTERNAL_API_ERROR = BUSINESS_ERROR_BASE + 20
EXTERNAL_API_TIMEOUT_ERROR = BUSINESS_ERROR_BASE + 21
EXTERNAL_API_RATE_LIMIT_ERROR = BUSINESS_ERROR_BASE + 22

# 数据处理错误
DATA_NOT_FOUND_ERROR = BUSINESS_ERROR_BASE + 30
DATA_PROCESSING_ERROR = BUSINESS_ERROR_BASE + 31
DATA_FORMAT_ERROR = BUSINESS_ERROR_BASE + 32

# 系统错误
SYSTEM_ERROR = BUSINESS_ERROR_BASE + 40
CONFIG_ERROR = BUSINESS_ERROR_BASE + 41
DATABASE_ERROR = BUSINESS_ERROR_BASE + 42
CACHE_ERROR = BUSINESS_ERROR_BASE + 43

# 错误码到消息的映射
ERROR_MESSAGES = {
    SUCCESS_CODE: "操作成功",
    
    # HTTP标准错误
    VALIDATION_ERROR_CODE: "请求参数验证失败",
    AUTH_ERROR_CODE: "认证失败",
    FORBIDDEN_ERROR_CODE: "权限不足",
    NOT_FOUND_ERROR_CODE: "资源未找到",
    METHOD_NOT_ALLOWED_CODE: "请求方法不允许",
    CONFLICT_ERROR_CODE: "请求冲突",
    UNPROCESSABLE_ENTITY_CODE: "请求实体无法处理",
    TOO_MANY_REQUESTS_CODE: "请求过于频繁",
    
    INTERNAL_ERROR_CODE: "服务器内部错误",
    NOT_IMPLEMENTED_CODE: "功能未实现",
    BAD_GATEWAY_CODE: "网关错误",
    SERVICE_UNAVAILABLE_CODE: "服务不可用",
    GATEWAY_TIMEOUT_CODE: "网关超时",
    
    # 业务错误
    PARAM_MISSING_ERROR: "缺少必要参数",
    PARAM_INVALID_ERROR: "参数值无效",
    PARAM_FORMAT_ERROR: "参数格式错误",
    
    TOKEN_MISSING_ERROR: "缺少访问令牌",
    TOKEN_INVALID_ERROR: "访问令牌无效",
    TOKEN_EXPIRED_ERROR: "访问令牌已过期",
    PERMISSION_DENIED_ERROR: "权限不足",
    
    EXTERNAL_API_ERROR: "外部API调用失败",
    EXTERNAL_API_TIMEOUT_ERROR: "外部API调用超时",
    EXTERNAL_API_RATE_LIMIT_ERROR: "外部API调用频率限制",
    
    DATA_NOT_FOUND_ERROR: "数据未找到",
    DATA_PROCESSING_ERROR: "数据处理失败",
    DATA_FORMAT_ERROR: "数据格式错误",
    
    SYSTEM_ERROR: "系统错误",
    CONFIG_ERROR: "配置错误",
    DATABASE_ERROR: "数据库错误",
    CACHE_ERROR: "缓存错误"
}


def get_error_message(error_code: int) -> str:
    """
    根据错误码获取错误信息
    
    Args:
        error_code: 错误码
        
    Returns:
        str: 错误信息
    """
    return ERROR_MESSAGES.get(error_code, "未知错误")


class ErrorCode:
    """
    错误码枚举类
    提供统一的错误码访问接口
    """
    
    # 成功码
    SUCCESS = SUCCESS_CODE
    
    # HTTP状态码
    VALIDATION_ERROR = VALIDATION_ERROR_CODE
    AUTH_ERROR = AUTH_ERROR_CODE
    FORBIDDEN_ERROR = FORBIDDEN_ERROR_CODE
    NOT_FOUND_ERROR = NOT_FOUND_ERROR_CODE
    METHOD_NOT_ALLOWED = METHOD_NOT_ALLOWED_CODE
    CONFLICT_ERROR = CONFLICT_ERROR_CODE
    UNPROCESSABLE_ENTITY = UNPROCESSABLE_ENTITY_CODE
    TOO_MANY_REQUESTS = TOO_MANY_REQUESTS_CODE
    
    INTERNAL_ERROR = INTERNAL_ERROR_CODE
    NOT_IMPLEMENTED = NOT_IMPLEMENTED_CODE
    BAD_GATEWAY = BAD_GATEWAY_CODE
    SERVICE_UNAVAILABLE = SERVICE_UNAVAILABLE_CODE
    GATEWAY_TIMEOUT = GATEWAY_TIMEOUT_CODE
    
    # 业务错误码
    PARAM_MISSING = PARAM_MISSING_ERROR
    PARAM_INVALID = PARAM_INVALID_ERROR
    PARAM_FORMAT = PARAM_FORMAT_ERROR
    
    TOKEN_MISSING = TOKEN_MISSING_ERROR
    TOKEN_INVALID = TOKEN_INVALID_ERROR
    TOKEN_EXPIRED = TOKEN_EXPIRED_ERROR
    PERMISSION_DENIED = PERMISSION_DENIED_ERROR
    
    EXTERNAL_API_ERROR = EXTERNAL_API_ERROR
    EXTERNAL_API_TIMEOUT = EXTERNAL_API_TIMEOUT_ERROR
    EXTERNAL_API_RATE_LIMIT = EXTERNAL_API_RATE_LIMIT_ERROR
    
    DATA_NOT_FOUND = DATA_NOT_FOUND_ERROR
    DATA_PROCESSING = DATA_PROCESSING_ERROR
    DATA_FORMAT = DATA_FORMAT_ERROR
    
    SYSTEM_ERROR = SYSTEM_ERROR
    CONFIG_ERROR = CONFIG_ERROR
    DATABASE_ERROR = DATABASE_ERROR
    CACHE_ERROR = CACHE_ERROR
    
    @classmethod
    def get_message(cls, error_code: int) -> str:
        """
        获取错误码对应的错误信息
        
        Args:
            error_code: 错误码
            
        Returns:
            str: 错误信息
        """
        return get_error_message(error_code)